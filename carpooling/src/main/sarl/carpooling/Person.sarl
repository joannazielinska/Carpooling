/** 
 * 
 */
package carpooling

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Lifecycle
import java.util.Random
import io.sarl.core.DefaultContextInteractions
import io.sarl.util.Scopes

/** 
 * @author Professional
 * 
 */
agent Person {
	uses DefaultContextInteractions, Lifecycle, Logging

	var age : int
	var sex : Sex
	var hasDriverLicense : boolean
	var hasCar : boolean
	var location : Location
	var ownCash : double

	val random = new Random()
	var max = 80
	var min = 18
	var enums : Sex[]

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The person has been created.")
		age = random.nextInt((max - min) + 1) + min
		enums = Sex.values()
		sex = enums.get(random.nextInt(2))
		hasDriverLicense = random.nextBoolean()
		hasCar = random.nextBoolean()
		location = Map.cities.get(random.nextInt(Map.cities.size()))
		ownCash = random.nextInt(50)+50
		info("Person's data:")
		info(location.getLocationName())
		
	}

	on MatchStart
	{
		var superScope = Scopes.addresses(defaultSpace.getAddress(defaultContext.getID))
		var destinationIndex = random.nextInt(Map.cities.size())
		emit(new Match(location,  Map.cities.get(destinationIndex)), superScope)
	}
	
	on Matched
	{
		info("My location: " + location.getLocationName() + " SR: " + 
			occurrence.startLocation.getLocationName() + " " + occurrence.destination.getLocationName()
		)
	}
	

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
